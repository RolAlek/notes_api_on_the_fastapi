[tool.poetry]
name = "notes on the fastapi"
version = "0.1.0"
description = "Application for adding custom notes"
authors = ["Aleksandr Rol <rolaleksandr75@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.112.2"
pydantic-settings = "^2.4.0"
uvicorn = {extras = ["standart"], version = "^0.30.6"}
sqlalchemy = {extras = ["asyncio"], version = "^2.0.32"}
asyncpg = "^0.29.0"
alembic = "^1.13.2"
fastapi-users = {extras = ["sqlalchemy"], version = "^13.0.0"}

[tool.poetry.group.dev.dependencies]
black = "^24.8.0"
isort = "^5.13.2"
flake8 = "^7.1.1"
flake8-pyproject = "^1.2.3"
flake8-annotations = "^3.1.1"
flake8-commas = "^4.0.0"
flake8-docstrings = "^1.7.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.flake8]
extend-exclude = [
    "tests/",
    "venv/",
    "env/",
    "alembic/"
]
ignore = [
    "ANN101",  # missing type annotation for self in method
    "ANN102",  # missing type annotation for cls in classmethod
    "D100",  # missing docstring in public module
    "D101",  # missing docstring in public class
    "D102",  # missing docstring in public method
    "D103",  # missing docstring in public function
    "D104",  # missing docstring in public package
    "D105",  # missing docstring in magic method
    "D106",  # missing docstring in public nested class
    "D107",  # missing docstring in __init__
    "W503",  # line break before binary operator
]
max-complexity = 10
max-line-length = 79
per-file-ignores = [
    "__init__.py:F401",  # %r imported but unused
    "db.py:N805",  # first argument of a method should be named 'self'
]

[tool.isort]
profile = "black"
line_length = 79
src_paths = "notes-app"
extend_skip = ["alembic"]

